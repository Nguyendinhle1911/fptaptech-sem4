package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderDetailAllPropertiesEquals(OrderDetail expected, OrderDetail actual) {
        assertOrderDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderDetailAllUpdatablePropertiesEquals(OrderDetail expected, OrderDetail actual) {
        assertOrderDetailUpdatableFieldsEquals(expected, actual);
        assertOrderDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderDetailAutoGeneratedPropertiesEquals(OrderDetail expected, OrderDetail actual) {
        assertThat(actual)
            .as("Verify OrderDetail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderDetailUpdatableFieldsEquals(OrderDetail expected, OrderDetail actual) {
        assertThat(actual)
            .as("Verify OrderDetail relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getSubTotal()).as("check subTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubTotal())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderDetailUpdatableRelationshipsEquals(OrderDetail expected, OrderDetail actual) {
        assertThat(actual)
            .as("Verify OrderDetail relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getOrder()).as("check order").isEqualTo(expected.getOrder()));
    }
}
