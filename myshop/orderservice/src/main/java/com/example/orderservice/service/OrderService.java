package com.example.orderservice.service;

import com.example.orderservice.repository.OrderRepository;
import com.example.orderservice.repository.OrderItemRepository;
import com.example.orderservice.dto.OrderRequestDto;
import com.example.orderservice.entity.Order;
import com.example.orderservice.entity.OrderItem;
import com.example.orderservice.entity.OrderStatus;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;
    private final OrderItemRepository orderItemRepository;

    /** üõí T·∫°o ƒë∆°n h√†ng m·ªõi */
    @Transactional
    public Order createOrder(OrderRequestDto orderRequest) {
        if (orderRequest.getOrderItems().isEmpty()) {
            throw new IllegalArgumentException("ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m!");
        }

        Order order = new Order();
        order.setUserId(orderRequest.getUserId());
        order.setStatus(OrderStatus.PENDING);

        // L∆∞u ƒë∆°n h√†ng ƒë·ªÉ c√≥ ID
        Order savedOrder = orderRepository.save(order);

        // T·∫°o danh s√°ch c√°c OrderItem v√† t√≠nh t·ªïng ti·ªÅn
        List<OrderItem> orderItems = orderRequest.getOrderItems().stream()
                .map(itemDto -> new OrderItem(savedOrder, itemDto.getProductId(), itemDto.getQuantity(), itemDto.getPrice()))
                .collect(Collectors.toList());

        // L∆∞u t·∫•t c·∫£ c√°c orderItems v√†o c∆° s·ªü d·ªØ li·ªáu
        orderItemRepository.saveAll(orderItems);

        // T√≠nh t·ªïng ti·ªÅn v·ªõi BigDecimal
        BigDecimal totalAmount = orderItems.stream()
                .map(item -> item.getPrice().multiply(new BigDecimal(item.getQuantity())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√†o ƒë∆°n h√†ng
        savedOrder.setTotalAmount(totalAmount);

        // L∆∞u l·∫°i ƒë∆°n h√†ng v·ªõi t·ªïng ti·ªÅn ƒë√£ c·∫≠p nh·∫≠t
        orderRepository.save(savedOrder);

        return savedOrder;
    }

    /** üë§ L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user */
    public List<Order> getOrdersByUser(Long userId) {
        return orderRepository.findByUserId(userId);
    }

    /** üìù L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng */
    public List<Order> getAllOrders() {
        return orderRepository.findAll(); // Tr·∫£ v·ªÅ t·∫•t c·∫£ ƒë∆°n h√†ng
    }

    /** üëÄ L·∫•y chi ti·∫øt ƒë∆°n h√†ng */
    public Order getOrderById(Long orderId) {
        return orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));
    }

    /** ‚ùå H·ªßy ƒë∆°n h√†ng */
    @Transactional
    public void cancelOrder(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));

        if (order.getStatus() == OrderStatus.CANCELED) {
            throw new IllegalStateException("ƒê∆°n h√†ng n√†y ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥!");
        }

        order.setStatus(OrderStatus.CANCELED);
        orderRepository.save(order);
    }

    /** ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng */
    @Transactional
    public void confirmOrder(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));

        if (order.getStatus() != OrderStatus.PENDING) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i PENDING!");
        }

        order.setStatus(OrderStatus.CONFIRMED);
        orderRepository.save(order);
    }

    /** üöö C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng */
    @Transactional
    public void updateOrderStatus(Long orderId, OrderStatus status) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));

        order.setStatus(status);
        orderRepository.save(order);
    }

    /** üóëÔ∏è X√≥a ƒë∆°n h√†ng */
    @Transactional
    public void deleteOrder(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));

        if (order.getStatus() != OrderStatus.PENDING) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ x√≥a ƒë∆°n h√†ng khi tr·∫°ng th√°i l√† PENDING!");
        }

        orderRepository.delete(order);
    }

    /** üîÑ C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong ƒë∆°n h√†ng */
    @Transactional
    public void updateOrderItem(Long orderId, Long itemId, OrderItem newItem) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!"));

        OrderItem orderItem = orderItemRepository.findById(itemId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong ƒë∆°n h√†ng!"));

        orderItem.setQuantity(newItem.getQuantity());
        orderItem.setPrice(newItem.getPrice());
        orderItemRepository.save(orderItem);
    }
}
